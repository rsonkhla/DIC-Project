package myWordCooccurence;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class WordCooccurence {

  public static class TokenizerMapper 
       extends Mapper<Object, Text, Text, TextStripe>{
      
    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      List<String> tokens 	= MyTokenizer.GetValidTokens(value.toString());
      int noOftokens 		= tokens.size();
      int contextWinSz 		= noOftokens;
      TextStripe wordStripe	= new TextStripe();
      
		
		for(int i=0 ; i<noOftokens ; i++) {
			int minWinCord	= (i-contextWinSz) >= 0 		 ?  (i-contextWinSz) : 0;
			int maxWinCord	= (i+contextWinSz) <  noOftokens ?  (i+contextWinSz) : noOftokens;
			
			for(int j=minWinCord ; j<maxWinCord ; j++) {
				if(!tokens.get(i).equals(tokens.get(j))) {
					wordStripe.addText(tokens.get(j), 1);
				}
			}
			context.write(new Text(tokens.get(i)), wordStripe);
			wordStripe.map.clear();
		}
      }
    }
  
  public static class IntSumCombiner 
  		extends Reducer<Text,TextStripe,Text,TextStripe> {
	
	  TextStripe result		= new TextStripe();
	  
	public void reduce(Text key, Iterable<TextStripe> values, 
	                  Context context
	                  ) throws IOException, InterruptedException {
	 
	 //System.out.print("Combiner\n");
	 //System.out.print(key.toString() + " : ");
		 
	 for (TextStripe strps : values) { 
		 
	   //System.out.print(strps.map.toString() + " -x- "); 
		 
	   for (Map.Entry<String, Integer> itr : strps.map.entrySet()) {
		   result.addText(itr.getKey(), itr.getValue());
	   }
	 } 
	 
	 //System.out.print("Result\n");
	 //System.out.print(result.map.toString() + "\n");
	 
	 context.write(key, result);
	 result.map.clear();
	}
  }
  
  public static class IntSumReducer 
       extends Reducer<Text,TextStripe,Text,DoubleWritable> {
	  
	  TextStripe result		= new TextStripe();
	  double count  		= 0;

    public void reduce(Text key, Iterable<TextStripe> values, 
                       Context context
                       ) throws IOException, InterruptedException {
    	
      //System.out.print("Reducer\n");
      //System.out.print(key.toString() + " : "); 
      count 	= 0;
    	
      for (TextStripe strps : values) {
    	  
    	  //System.out.print(strps.map.toString() + " -x- "); 
    	  
    	  for (Map.Entry<String, Integer> itr : strps.map.entrySet()) {
   		   	  result.addText(itr.getKey(), itr.getValue());
   		   	  count = count + itr.getValue();
   	   	  }
      }
      
      //System.out.print("Result\n");
 	  //System.out.print(result.map.toString() + "\n");
      
      for (Map.Entry<String, Integer> itr : result.map.entrySet()) {
    	  context.write(new Text(key.toString() + " - " + itr.getKey()), new DoubleWritable(itr.getValue() / count));
  	   }
      result.map.clear();
    }
  }

  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
    if (otherArgs.length != 2) {
      System.err.println("Usage: wordcooccurence <in> <out>");
      System.exit(2);
    }
    Job job = new Job(conf, "word cooccurence");
    job.setJarByClass(WordCooccurence.class);
    job.setMapperClass(TokenizerMapper.class);
    job.setCombinerClass(IntSumCombiner.class);
    job.setReducerClass(IntSumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(TextStripe.class);
    
    job.setNumReduceTasks(2);
    FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
    FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}